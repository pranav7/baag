#!/usr/bin/env zx

import { $, path, fs, os } from 'zx'
import chalk from 'chalk'
import boxen from 'boxen'
import figures from 'figures'

$.verbose = false

// Enhanced print functions using modern CLI libraries
function printSuccess(message) {
  console.log(chalk.green(figures.tick) + ' ' + message)
}

function printError(message) {
  console.error(chalk.red(figures.cross) + ' ' + message)
}

function printInfo(message) {
  console.log(chalk.blue(figures.info) + ' ' + message)
}

function printWarning(message) {
  console.log(chalk.yellow(figures.warning) + ' ' + message)
}

function printHeader(message) {
  console.log(boxen(chalk.bold.cyan(message), {
    padding: { top: 0, bottom: 0, left: 1, right: 1 },
    margin: { top: 1, bottom: 0 },
    borderStyle: 'round',
    borderColor: 'cyan'
  }))
}

// Installation configuration
const INSTALL_DIR = path.join(os.homedir(), '.local', 'bin')
const LIB_DIR = path.join(os.homedir(), '.local', 'lib', 'baag')
const SCRIPT_NAME = "baag"

// Dependency tracking
const MISSING_DEPS = []
const OPTIONAL_DEPS = []

async function checkDependency(cmd, required, installInfo) {
  try {
    await $`which ${cmd}`
    printSuccess(`${cmd} is available`)
    return true
  } catch {
    if (required) {
      printError(`${cmd} is not installed (required)`)
      MISSING_DEPS.push(`${cmd}|${installInfo}`)
    } else {
      printWarning(`${cmd} is not installed (optional - enables enhanced features)`)
      OPTIONAL_DEPS.push(`${cmd}|${installInfo}`)
    }
    return false
  }
}

async function checkDependencies() {
  printHeader("Checking Dependencies")

  // Required dependencies
  await checkDependency("git", true, "Install from: https://git-scm.com/downloads")
  await checkDependency("node", true, "Install from: https://nodejs.org/")
  await checkDependency("zx", true, "Install with: npm install -g zx")

  // Optional dependencies
  await checkDependency("tmux", false, "Install with: brew install tmux (macOS) or apt-get install tmux (Ubuntu)")
  await checkDependency("gh", false, "Install from: https://cli.github.com/ (enables PR creation)")
  await checkDependency("claude", false, "Install from: https://claude.ai/claude-cli (enables AI integration)")

  if (MISSING_DEPS.length > 0) {
    printHeader("Missing Required Dependencies")
    for (const dep of MISSING_DEPS) {
      const [cmd, info] = dep.split('|')
      console.log(`  ${chalk.red(cmd)}: ${info}`)
    }
    console.log("\nPlease install the required dependencies and run this script again.")
    process.exit(1)
  }

  if (OPTIONAL_DEPS.length > 0) {
    printHeader("Optional Dependencies")
    console.log(chalk.dim('The following optional dependencies can enhance your workflow:'))
    for (const dep of OPTIONAL_DEPS) {
      const [cmd, info] = dep.split('|')
      console.log(`  ${chalk.yellow(cmd)}: ${info}`)
    }
    console.log('\n' + chalk.dim('You can install these later to enable additional features.'))
  }
}

async function setupInstallDirectory() {
  printHeader("Setting Up Installation Directory")

  if (!fs.existsSync(INSTALL_DIR)) {
    printInfo(`Creating directory: ${INSTALL_DIR}`)
    await $`mkdir -p ${INSTALL_DIR}`
  } else {
    printSuccess(`Directory exists: ${INSTALL_DIR}`)
  }

  if (!fs.existsSync(LIB_DIR)) {
    printInfo(`Creating library directory: ${LIB_DIR}`)
    await $`mkdir -p ${LIB_DIR}`
  } else {
    printSuccess(`Library directory exists: ${LIB_DIR}`)
  }

  // Check if install directory is in PATH
  const pathEnv = process.env.PATH || ""
  if (pathEnv.includes(INSTALL_DIR)) {
    printSuccess(`${INSTALL_DIR} is in your PATH`)
  } else {
    printWarning(`${INSTALL_DIR} is not in your PATH`)
    printInfo("Add the following to your shell configuration file (~/.bashrc, ~/.zshrc, etc.):")
    console.log(chalk.dim(`export PATH="$PATH:${INSTALL_DIR}"`))
  }
}

async function installScript() {
  printHeader("Installing Baag")

  const scriptDir = path.dirname(new URL(import.meta.url).pathname)
  const sourceScript = path.join(scriptDir, '..', 'bin', SCRIPT_NAME)
  const sourceLib = path.join(scriptDir, '..', 'lib', 'common.sh')
  const targetScript = path.join(INSTALL_DIR, SCRIPT_NAME)
  const targetLib = path.join(LIB_DIR, 'common.sh')

  if (!fs.existsSync(sourceScript)) {
    printError(`Source script not found: ${sourceScript}`)
    printInfo("Make sure you're running this script from the correct directory")
    process.exit(1)
  }

  if (!fs.existsSync(sourceLib)) {
    printError(`Source library not found: ${sourceLib}`)
    printInfo("Make sure you're running this script from the correct directory")
    process.exit(1)
  }

  // Install all library modules
  printInfo(`Installing library modules to ${LIB_DIR}`)
  const libSourceDir = path.join(scriptDir, '..', 'lib')
  
  // Copy all .mjs files from lib directory
  try {
    const libFiles = await fs.readdir(libSourceDir)
    for (const file of libFiles) {
      if (file.endsWith('.mjs')) {
        const sourceFile = path.join(libSourceDir, file)
        const targetFile = path.join(LIB_DIR, file)
        await $`cp ${sourceFile} ${targetFile}`
        printInfo(`  Copied ${file}`)
      }
    }
    printSuccess("Library modules installed")
  } catch (error) {
    printError(`Failed to copy library modules: ${error.message}`)
    process.exit(1)
  }

  // Install main script (create wrapper for proper module resolution)
  printInfo(`Installing ${SCRIPT_NAME} to ${targetScript}`)
  
  // Copy the actual script to lib directory
  const actualScript = path.join(LIB_DIR, 'baag.mjs')
  await $`cp ${sourceScript} ${actualScript}`
  
  // Create a wrapper script that sets up the environment
  const wrapperScript = `#!/bin/bash
# Baag wrapper script
export NODE_PATH="${LIB_DIR}/node_modules:$NODE_PATH"
node "${LIB_DIR}/baag.mjs" "$@"
`
  
  await fs.writeFile(targetScript, wrapperScript)
  await $`chmod +x ${targetScript}`
  printSuccess("Main script installed")

  // Create package.json for dependencies in the lib directory
  const packageJsonPath = path.join(LIB_DIR, 'package.json')
  const packageJson = {
    name: "baag-lib",
    version: "0.0.1",
    type: "module",
    dependencies: {
      "zx": "^8.0.0",
      "chalk": "^5.3.0",
      "boxen": "^7.1.1", 
      "figures": "^6.1.0"
    }
  }
  
  printInfo("Creating package.json for dependencies...")
  await fs.writeFile(packageJsonPath, JSON.stringify(packageJson, null, 2))
  
  // Install dependencies in the lib directory
  printInfo("Installing Node.js dependencies...")
  try {
    await $`cd ${LIB_DIR} && npm install --omit=dev`
    printSuccess("Dependencies installed")
  } catch (error) {
    printWarning("Failed to install dependencies automatically")
    printInfo("You may need to run: cd ~/.local/lib/baag && npm install")
  }
}

async function verifyInstallation() {
  printHeader("Verifying Installation")

  const targetScript = path.join(INSTALL_DIR, SCRIPT_NAME)

  try {
    await $`test -x ${targetScript}`
    printSuccess("Main script is executable")
  } catch {
    printError("Main script is not executable")
    return false
  }

  // Test version command (only if in PATH)
  try {
    await $`which ${SCRIPT_NAME}`
    printInfo("Testing installation...")
    try {
      await $`${SCRIPT_NAME} version`
      printSuccess("Installation test passed")
    } catch {
      printWarning("Installation test failed - you may need to restart your shell")
    }
  } catch {
    printWarning("Command not found in PATH - you may need to restart your shell")
    // Fallback: test with zx directly
    try {
      printInfo("Testing with zx directly...")
      await $`zx ${targetScript} version`
      printSuccess("ZX-based installation test passed")
    } catch {
      printWarning("ZX test also failed - please check your installation")
    }
  }

  return true
}

function showUsageInfo() {
  printHeader("Installation Complete")

  // Build the complete content including optional dependencies
  const mainContent = [
    chalk.green(figures.tick) + ' Baag has been installed successfully!',
    '',
    chalk.bold('Usage:'),
    '  baag start <n>     # Create new worktree',
    '  baag stop [name]      # Remove worktree',
    '  baag list            # List all worktrees',
    '  baag submit|finish   # Create PR and cleanup',
    '  baag version         # Show version',
    '',
    chalk.bold('Getting Started:'),
    '1. Navigate to any git repository',
    `2. Run: ${chalk.blue('baag start feature-branch')}`,
    '3. Work on your feature',
    `4. Run: ${chalk.blue('baag submit')} or ${chalk.blue('baag finish')} to create a PR`
  ]

  // Add optional dependencies if any exist
  if (OPTIONAL_DEPS.length > 0) {
    mainContent.push('')
    mainContent.push(chalk.bold('Optional Dependencies:'))
    for (const dep of OPTIONAL_DEPS) {
      const [cmd, info] = dep.split('|')
      mainContent.push(`  ${chalk.yellow(cmd)}: ${info}`)
    }
  }

  // Add help information
  mainContent.push('')
  mainContent.push(`For more information, run: ${chalk.blue('baag --help')}`)

  console.log(boxen(mainContent.join('\n'), {
    padding: 1,
    margin: { top: 0, bottom: 1 },
    borderStyle: 'double',
    borderColor: 'green'
  }))
}

// Main installation flow
async function main() {
  const command = process.argv[2] || 'install'

  switch (command) {
    case 'install':
      printHeader("Baag â€” AI Terminal Agent Automation")
      console.log(chalk.dim('Enhanced git worktree workflows with tmux and AI integration'))

      await checkDependencies()
      await setupInstallDirectory()
      await installScript()
      await verifyInstallation()
      showUsageInfo()
      break

    case 'check':
      await checkDependencies()
      break

    case '--help':
    case '-h':
      console.log("Baag Installation Script\n")
      console.log("Usage: install.mjs [command]\n")
      console.log("Commands:")
      console.log("  install (default)  Install baag")
      console.log("  check              Only check dependencies")
      console.log("  --help, -h         Show this help")
      break

    default:
      printError(`Unknown command: ${command}`)
      console.log("Run 'install.mjs --help' for usage information.")
      process.exit(1)
  }
}

main().catch(error => {
  printError(`Installation failed: ${error.message}`)
  process.exit(1)
})