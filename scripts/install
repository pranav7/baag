#!/bin/bash
#
# Baag Installation Script
# Installs baag with dependency checks

set -e

# Load common library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=../lib/common.sh
. "$SCRIPT_DIR/../lib/common.sh"

# Installation configuration
INSTALL_DIR="${HOME}/.local/bin"
LIB_DIR="${HOME}/.local/lib/baag"
SCRIPT_NAME="baag"

# Dependency tracking
MISSING_DEPS=()
OPTIONAL_DEPS=()

check_dependency() {
  local cmd="$1"
  local required="$2"
  local install_info="$3"

  if check_command_enhanced "$cmd"; then
    print_success "$cmd is available"
    return 0
  else
    if [ "$required" = "true" ]; then
      print_error "$cmd is not installed (required)"
      MISSING_DEPS+=("$cmd|$install_info")
    else
      print_warning "$cmd is not installed (optional - enables enhanced features)"
      OPTIONAL_DEPS+=("$cmd|$install_info")
    fi
    return 1
  fi
}

check_dependencies() {
  print_header "Checking Dependencies"

  # Required dependencies
  check_dependency "git" "true" "Install from: https://git-scm.com/downloads"

  # Optional dependencies
  check_dependency "tmux" "false" "Install with: brew install tmux (macOS) or apt-get install tmux (Ubuntu)"
  check_dependency "gh" "false" "Install from: https://cli.github.com/ (enables PR creation)"
  check_dependency "claude" "false" "Install from: https://claude.ai/claude-cli (enables AI integration)"

  # Check for bash/sh
  if [ -z "$BASH_VERSION" ] && [ -z "$ZSH_VERSION" ]; then
    print_warning "Running in a shell other than bash/zsh - some features may not work optimally"
  fi

  if [ ${#MISSING_DEPS[@]} -gt 0 ]; then
    print_header "Missing Required Dependencies"
    for dep in "${MISSING_DEPS[@]}"; do
      cmd=$(echo "$dep" | cut -d'|' -f1)
      info=$(echo "$dep" | cut -d'|' -f2)
      printf "  ${RED}$cmd${NC}: $info\n"
    done
    printf "\nPlease install the required dependencies and run this script again.\n"
    exit 1
  fi

  if [ ${#OPTIONAL_DEPS[@]} -gt 0 ]; then
    print_header "Optional Dependencies"
    printf "${DIM}The following optional dependencies can enhance your workflow:${NC}\n"
    for dep in "${OPTIONAL_DEPS[@]}"; do
      cmd=$(echo "$dep" | cut -d'|' -f1)
      info=$(echo "$dep" | cut -d'|' -f2)
      printf "  ${YELLOW}$cmd${NC}: $info\n"
    done
    printf "\n${DIM}You can install these later to enable additional features.${NC}\n"
  fi
}



configure_path() {
  local shell_config="$(detect_shell_config)"
  local path_export="export PATH=\"\$PATH:$INSTALL_DIR\""

  print_header "Configuring PATH"

  # Check if PATH already contains our directory
  if echo "$PATH" | grep -q ":$INSTALL_DIR" || echo "$PATH" | grep -q "^$INSTALL_DIR:"; then
    print_success "$INSTALL_DIR is already in your PATH"
    return 0
  fi

  print_info "Shell configuration file: $shell_config"

  # Check if our export is already in the config file
  if [ -f "$shell_config" ] && grep -q "PATH.*$INSTALL_DIR" "$shell_config"; then
    print_success "PATH configuration already exists in $shell_config"
    print_warning "You may need to restart your shell or run: source $shell_config"
    return 0
  fi

  printf "\n${YELLOW}$INSTALL_DIR is not in your PATH.${NC}\n"
  printf "Would you like to automatically add it to your shell configuration? (Y/n): "

  read -r response
  case "$response" in
    [nN]|[nN][oO])
      print_info "Skipping automatic PATH configuration"
      printf "\n${DIM}To manually add to PATH, add this line to $shell_config:${NC}\n"
      printf "${BLUE}$path_export${NC}\n"
      return 1
      ;;
    *)
      # Add PATH export to shell config
      print_info "Adding PATH export to $shell_config"

      # Create config file if it doesn't exist
      if [ ! -f "$shell_config" ]; then
        touch "$shell_config"
      fi

      # Add the export with a comment
      printf "\n# Added by baag installer\n%s\n" "$path_export" >> "$shell_config"

      print_success "PATH configuration added to $shell_config"
      print_info "Restart your shell or run: ${BLUE}source $shell_config${NC}"
      return 0
      ;;
  esac
}

setup_install_directory() {
  print_header "Setting Up Installation Directory"

  if [ ! -d "$INSTALL_DIR" ]; then
    print_info "Creating directory: $INSTALL_DIR"
    mkdir -p "$INSTALL_DIR"
  else
    print_success "Directory exists: $INSTALL_DIR"
  fi

  if [ ! -d "$LIB_DIR" ]; then
    print_info "Creating library directory: $LIB_DIR"
    mkdir -p "$LIB_DIR"
  else
    print_success "Library directory exists: $LIB_DIR"
  fi
}

install_script() {
  print_header "Installing Git Worktree Manager"

  local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  local source_script="$script_dir/../bin/$SCRIPT_NAME"
  local source_lib="$script_dir/../lib/common.sh"
  local target_script="$INSTALL_DIR/$SCRIPT_NAME"
  local target_lib="$LIB_DIR/common.sh"

  if [ ! -f "$source_script" ]; then
    print_error "Source script not found: $source_script"
    print_info "Make sure you're running this script from the correct directory"
    exit 1
  fi

  if [ ! -f "$source_lib" ]; then
    print_error "Source library not found: $source_lib"
    print_info "Make sure you're running this script from the correct directory"
    exit 1
  fi

  # Copy library first
  print_info "Installing common library to $target_lib"
  cp "$source_lib" "$target_lib"
  print_success "Library installed"

  # Copy main script and update library path
  print_info "Installing $SCRIPT_NAME to $target_script"
  sed "s|\$SCRIPT_DIR/../lib/common.sh|$target_lib|g" "$source_script" > "$target_script"
  chmod +x "$target_script"
  print_success "Main script installed"
}

verify_installation() {
  print_header "Verifying Installation"

  local target_script="$INSTALL_DIR/$SCRIPT_NAME"
  local target_lib="$LIB_DIR/common.sh"

  if [ -x "$target_script" ]; then
    print_success "Main script is executable"
  else
    print_error "Main script is not executable"
    return 1
  fi

  if [ -f "$target_lib" ]; then
    print_success "Library is installed"
  else
    print_error "Library is not installed"
    return 1
  fi

  # Test if commands are accessible
  if command -v "$SCRIPT_NAME" >/dev/null 2>&1; then
    print_info "Testing installation..."
    if "$SCRIPT_NAME" version >/dev/null 2>&1; then
      print_success "Installation test passed - baag is ready to use!"
    else
      print_warning "Installation test failed - script found but not working properly"
    fi
  else
    print_warning "baag command not found in PATH"
    print_info "You may need to restart your shell or run: ${BLUE}source $(detect_shell_config)${NC}"

    # Test direct execution
    if "$target_script" version >/dev/null 2>&1; then
      print_info "Direct script execution works - PATH configuration needed"
    else
      print_error "Script installation may have failed"
      return 1
    fi
  fi
}

show_usage_info() {
  print_header "Installation Complete"

  printf "Baag has been installed successfully!\n\n"

  # Check if baag is immediately available
  if command -v "$SCRIPT_NAME" >/dev/null 2>&1; then
    printf "${GREEN}✓${NC} baag is ready to use!\n\n"
  else
    printf "${YELLOW}⚠${NC} Restart your shell to use baag, or run: ${BLUE}source $(detect_shell_config)${NC}\n\n"
  fi

  printf "${BOLD}Usage:${NC}\n"
  printf "  baag start <name>            # Create new worktree\n"
  printf "  baag stop [name]             # Remove worktree (auto-detects if in worktree)\n"
  printf "  baag list                    # List all worktrees\n"
  printf "  baag submit                  # Create PR and cleanup\n"
  printf "  baag version                 # Show version\n\n"

  printf "${BOLD}Getting Started:${NC}\n"
  printf "1. Navigate to any git repository\n"
  printf "2. Run: ${BLUE}baag start feature-branch${NC}\n"
  printf "3. Work on your feature\n"
  printf "4. Run: ${BLUE}baag submit${NC} to create a PR\n\n"

  if [ ${#OPTIONAL_DEPS[@]} -gt 0 ]; then
    printf "${DIM}Install optional dependencies for enhanced features:${NC}\n"
    for dep in "${OPTIONAL_DEPS[@]}"; do
      cmd=$(echo "$dep" | cut -d'|' -f1)
      info=$(echo "$dep" | cut -d'|' -f2)
      printf "  ${YELLOW}$cmd${NC}: $info\n"
    done
    printf "\n"
  fi

  printf "For more information, run: ${BLUE}baag --help${NC}\n"
}

# Main installation flow
main() {
  print_header "Baag Installation"
  printf "${DIM}Enhanced git worktree workflows with tmux integration${NC}\n"

  check_dependencies
  setup_install_directory
  configure_path
  install_script
  verify_installation
  show_usage_info
}

# Handle command line arguments
case "${1:-install}" in
  install)
    main
    ;;
  check)
    check_dependencies
    ;;
  --help|-h)
    printf "Baag Installation Script\n\n"
    printf "Usage: $0 [command]\n\n"
    printf "Commands:\n"
    printf "  install (default)  Install baag\n"
    printf "  check              Only check dependencies\n"
    printf "  --help, -h         Show this help\n"
    ;;
  *)
    print_error "Unknown command: $1"
    printf "Run '$0 --help' for usage information.\n"
    exit 1
    ;;
esac